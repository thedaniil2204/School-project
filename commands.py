import os
import re
import logging
import time
from dotenv import load_dotenv
import telebot
import requests

import data_b as db  # –Ω–∞—à –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------- #
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

db.create_db()  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.ERROR)

# ---------- /start –∏ /help ---------- #
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    bot.reply_to(msg, f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}! üëã")


@bot.message_handler(commands=["help"])
def cmd_help(msg):
    bot.reply_to(
        msg,
        "‚ûä –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "‚ûã –ò—Å–ø–æ–ª—å–∑—É–π /create_check, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å —á–µ–∫.\n"
        "‚ûå –ü–∏—à–∏ &laquo;–æ–ø–ª–∞—Ç–∏–ª —Ç–≤–æ–π_–Ω–∏–∫ &raquo;, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–≤—ë–ª –¥–µ–Ω—å–≥–∏."
    )

# ---------- /create_check ---------- #
@bot.message_handler(commands=["create_check"])
def cmd_create_check(msg):
    bot.reply_to(
        msg,
        "–í–≤–µ–¥–∏—Ç–µ: —Å—É–º–º–∞ –∏–º—è_–ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∏–∫1 –¥–æ–ª–∂–Ω–∏–∫2 ..."
    )
    bot.register_next_step_handler(msg, _create_check_step)


def _create_check_step(msg):
    parts = msg.text.split()
    if len(parts) < 3:
        bot.reply_to(msg, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Å–ª–æ–≤–∞: —Å—É–º–º–∞, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –¥–æ–ª–∂–Ω–∏–∫–∏.")
        return

    try:
        total = float(parts[0])
    except ValueError:
        bot.reply_to(msg, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    buyer = parts[1]
    debtors = parts[2:]
    if not debtors:
        bot.reply_to(msg, "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥–æ–ª–∂–Ω–∏–∫–∞.")
        return

    per_person = round(total / len(debtors), 2)
    users_debts = {u: per_person for u in debtors}

    check_id = db.add_check(msg.chat.id, "–ß–µ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫–∏", msg.from_user.id, total)
    db.add_users_to_check(check_id, users_debts)

    text = db.build_check_text(check_id, buyer, total)
    sent = bot.send_message(msg.chat.id, text)
    db.save_check_message_id(check_id, sent.message_id)
    bot.pin_chat_message(msg.chat.id, sent.message_id)


# ---------- –û–ø–ª–∞—Ç–∞ ---------- #
@bot.message_handler(
    func=lambda m: bool(re.search(r"\b–æ–ø–ª–∞—Ç–∏–ª\b", m.text, flags=re.IGNORECASE))
)
def handle_payment(msg):
    tokens = msg.text.strip().split()
    if len(tokens) < 2:
        bot.reply_to(msg, "–§–æ—Ä–º–∞—Ç: &laquo;–æ–ø–ª–∞—Ç–∏–ª –Ω–∏–∫ &raquo;.")
        return

    user_name = tokens[1]
    record = db.get_user_record(user_name)
    if not record:
        bot.reply_to(msg, "–î–æ–ª–∂–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤—Å—ë –æ–ø–ª–∞—Ç–∏–ª.")
        return

    check_id = record["check_id"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_status(check_id, user_name, "–æ–ø–ª–∞—Ç–∏–ª")
    db.close_check_if_paid(check_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    buyer_name = ""  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–µ –∏–∑ –±–∞–∑—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    total_amount = record["debt"] * len(db.list_users_for_check(check_id))
    new_text = db.build_check_text(check_id, buyer_name, total_amount)
    message_id = db.get_check_message_id(check_id)

    if message_id:
        safe_edit_message(msg.chat.id, message_id, new_text)

    bot.reply_to(msg, f"–û—Ç–ª–∏—á–Ω–æ! {user_name} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π.")


# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π ---------- #
def safe_edit_message(chat_id, message_id, new_text):
    try:
        bot.edit_message_text(new_text, chat_id=chat_id, message_id=message_id)
    except requests.exceptions.RequestException as e:
        logging.error(f"Failed to edit message {message_id} in chat {chat_id}: {e}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
        time.sleep(5)
        try:
            bot.edit_message_text(new_text, chat_id=chat_id, message_id=message_id)
        except requests.exceptions.RequestException as retry_error:
            logging.error(f"Retry failed for message {message_id} in chat {chat_id}: {retry_error}")


# ---------- –ó–∞–ø—É—Å–∫ ---------- #
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    bot.infinity_polling()









