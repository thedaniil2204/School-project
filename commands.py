import os
import re
import time
import logging
from dotenv import load_dotenv
import telebot
import requests

import data_b as db


# ---------- init ---------- #
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
db.create_db()

logging.basicConfig(level=logging.INFO)


# ---------- small helpers ---------- #
PAY_CMD_RE = re.compile(r"\b–æ–ø–ª–∞—Ç–∏–ª\b", re.I)


def parse_payment_command(text: str) -> tuple[int | None, str | None]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (check_id, username)
      * '–æ–ø–ª–∞—Ç–∏–ª 3 ivan'  &rarr; (3, 'ivan')
      * '–æ–ø–ª–∞—Ç–∏–ª ivan'    &rarr; (None, 'ivan')
    """
    tokens = text.strip().split()
    if len(tokens) < 2:
        return None, None
    if tokens[1].lstrip("#").isdigit():
        if len(tokens) < 3:
            return None, None
        return int(tokens[1].lstrip("#")), tokens[2]
    return None, tokens[1]


def safe_edit_message(chat_id: int, message_id: int, text: str) -> None:
    try:
        bot.edit_message_text(text, chat_id=chat_id, message_id=message_id)
    except requests.exceptions.RequestException as e:
        logging.error(f"edit_message_text failed: {e}")
        time.sleep(3)
        try:
            bot.edit_message_text(text, chat_id=chat_id, message_id=message_id)
        except Exception as e2:
            logging.error(f"retry failed: {e2}")


# ---------- /start  /help ---------- #
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.reply_to(m, f"–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name}! üëã")


@bot.message_handler(commands=["help"])
def cmd_help(m):
    bot.reply_to(
        m,
        "‚ûä –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "‚ûã /create_check ‚Äî —Å–æ–∑–¥–∞—Ç—å —á–µ–∫.\n"
        "‚ûå –û–ø–ª–∞—Ç–∞: &laquo;–æ–ø–ª–∞—Ç–∏–ª ‚Ññ_—á–µ–∫–∞ –Ω–∏–∫ &raquo;  –∏–ª–∏  &laquo;–æ–ø–ª–∞—Ç–∏–ª –Ω–∏–∫ &raquo; (–¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞).\n"
        "‚ûç &laquo;–ø–æ—Å—á–∏—Ç–∞–π –≤—Å–µ&raquo; ‚Äî –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç."
    )


# ---------- /create_check ---------- #
@bot.message_handler(commands=["create_check"])
def cmd_create_check(m):
    bot.reply_to(
        m,
        "–í–≤–µ–¥–∏—Ç–µ: —Å—É–º–º–∞ –∏–º—è_–ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∏–∫1 –¥–æ–ª–∂–Ω–∏–∫2 ..."
    )
    bot.register_next_step_handler(m, _create_step)


def _create_step(m):
    parts = m.text.split()
    if len(parts) < 3:
        bot.reply_to(m, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Å–ª–æ–≤–∞: —Å—É–º–º–∞, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –¥–æ–ª–∂–Ω–∏–∫–∏.")
        return
    try:
        total = float(parts[0])
    except ValueError:
        bot.reply_to(m, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    buyer = parts[1]
    debtors = parts[2:]
    per_person = round(total / len(debtors), 2)
    debts = {u: per_person for u in debtors}

    check_id = db.add_check(m.chat.id, buyer, m.from_user.id, total)
    db.add_users_to_check(check_id, debts)

    text = db.build_check_text(check_id)
    sent = bot.send_message(m.chat.id, text)
    db.save_check_message_id(check_id, sent.message_id)
    bot.pin_chat_message(m.chat.id, sent.message_id)


# ---------- &laquo;–ø–æ—Å—á–∏—Ç–∞–π –≤—Å–µ&raquo; ---------- #
@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith("–ø–æ—Å—á–∏—Ç–∞–π –≤—Å–µ"))
def calc_all(m):
    totals = db.aggregate_debts(m.chat.id)
    if not totals:
        bot.reply_to(m, "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —á–µ–∫–æ–≤ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞.")
        return

    total_sum = sum(totals.values())
    check_id = db.add_check(m.chat.id, "–°–≤–æ–¥–Ω—ã–π", m.from_user.id, total_sum, is_final=1)
    db.add_users_to_check(check_id, totals)

    text = db.build_check_text(check_id)
    sent = bot.send_message(m.chat.id, text)
    db.save_check_message_id(check_id, sent.message_id)
    bot.pin_chat_message(m.chat.id, sent.message_id)

    bot.send_message(
        m.chat.id,
        "–°–µ—Ä–∏—è —á–µ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–≤–æ–¥–Ω–æ–≥–æ —Å—á—ë—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é /create_check."
    )


# ---------- –æ–ø–ª–∞—Ç–∞ ---------- #
@bot.message_handler(func=lambda m: m.text and PAY_CMD_RE.search(m.text))
def handle_payment(m):
    check_id, user = parse_payment_command(m.text)
    if not user:
        bot.reply_to(m, "–§–æ—Ä–º–∞—Ç: &laquo;–æ–ø–ª–∞—Ç–∏–ª ‚Ññ_—á–µ–∫–∞ –Ω–∏–∫ &raquo; –∏–ª–∏ &laquo;–æ–ø–ª–∞—Ç–∏–ª –Ω–∏–∫ &raquo;.")
        return

    # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ–∫
    if check_id is None:
        check_id = db.get_last_open_check_id(m.chat.id)
        if check_id is None:
            bot.reply_to(m, "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —á–µ–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return

    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —á–µ–∫–µ
    rec = db.get_user_record(check_id, user)
    if not rec:
        bot.reply_to(m, f"{user} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ–∫–µ #{check_id} –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª.")
        return

    # –æ–±–Ω–æ–≤–ª—è–µ–º
    db.update_user_status(check_id, user, "–æ–ø–ª–∞—Ç–∏–ª")
    just_closed = db.close_check_if_paid(check_id)

    # —Ä–µ–¥–∞–∫—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_id = db.get_check_message_id(check_id)
    if msg_id:
        safe_edit_message(m.chat.id, msg_id, db.build_check_text(check_id))

    # –µ—Å–ª–∏ —á–µ–∫ –∑–∞–∫—Ä—ã–ª—Å—è ‚Äî –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º
    if just_closed and msg_id:
        try:
            bot.unpin_chat_message(m.chat.id, msg_id)
        except Exception:
            pass

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫ &rarr; –∑–∞–∫—Ä—ã—Ç—å –í–°–Å
    if just_closed and db.is_final(check_id):
        db.close_all_checks(m.chat.id)
        bot.send_message(m.chat.id, "–í—Å–µ —Å—á–µ—Ç–∞ –∑–∞–∫—Ä—ã—Ç—ã! üéâ")

    bot.reply_to(m, f"{user} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π.")


# ---------- run ---------- #
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    bot.infinity_polling()









